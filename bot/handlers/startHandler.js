const User = require('../models/User');
const Settings = require('../models/Settings');
const { requireChannelMembership } = require('../middleware/channelCheck');
const { checkMaintenanceMode } = require('../middleware/maintenanceCheck');
const { syncUserToWebApp } = require('../utils/userSync');

// Fonction pour supprimer les anciens messages du bot uniquement
async function clearOldMessages(bot, chatId, currentMessageId) {
  try {
    // Essayer de supprimer les messages pr√©c√©dents du bot
    // On commence √† partir du message pr√©c√©dent (currentMessageId - 1)
    for (let i = 1; i <= 10; i++) {
      const messageIdToDelete = currentMessageId - i;
      if (messageIdToDelete > 0) {
        try {
          // Tenter de supprimer le message
          // Si c'est un message de l'utilisateur, cela √©chouera silencieusement
          await bot.deleteMessage(chatId, messageIdToDelete);
        } catch (e) {
          // Ignorer les erreurs (message de l'utilisateur, d√©j√† supprim√©, etc.)
        }
      }
    }
  } catch (error) {
    console.log('Erreur lors de la suppression des anciens messages:', error.message);
  }
}

async function handleStart(bot, msg, param) {
  console.log('üì± handleStart appel√© pour:', msg.from.username || msg.from.first_name);
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const username = msg.from.username || msg.from.first_name;
  
  try {
    // Supprimer les anciens messages du bot (mais pas la commande /start de l'utilisateur)
    await clearOldMessages(bot, chatId, msg.message_id);
    
    // Cr√©er ou mettre √† jour l'utilisateur
    let user = await User.findOne({ telegramId: userId });
    
    if (!user) {
      user = new User({
        telegramId: userId,
        username: username,
        firstName: msg.from.first_name,
        lastName: msg.from.last_name,
        joinedAt: new Date()
      });
      
      // G√©rer le parrainage
      if (param && param.startsWith('ref_')) {
        const referrerId = param.replace('ref_', '');
        const referrer = await User.findById(referrerId);
        
        if (referrer && referrer.telegramId !== userId) {
          user.referredBy = referrerId;
          referrer.referralCount = (referrer.referralCount || 0) + 1;
          await referrer.save();
          
          await bot.sendMessage(chatId, 
            `üéâ Vous avez √©t√© parrain√© par @${referrer.username} !`,
            { parse_mode: 'HTML' }
          );
        }
      }
      
      await user.save();
      
      // Synchroniser le nouvel utilisateur avec la boutique web et attendre le r√©sultat
      console.log('üîÑ Synchronisation du nouvel utilisateur...');
      const syncSuccess = await syncUserToWebApp(user);
      if (!syncSuccess) {
        console.error('‚ö†Ô∏è La synchronisation a √©chou√© mais l\'utilisateur a √©t√© cr√©√© localement');
      }
    } else {
      // Mettre √† jour les informations si elles ont chang√©
      let needsUpdate = false;
      
      if (user.username !== username) {
        user.username = username;
        needsUpdate = true;
      }
      if (user.firstName !== msg.from.first_name) {
        user.firstName = msg.from.first_name;
        needsUpdate = true;
      }
      if (user.lastName !== msg.from.last_name) {
        user.lastName = msg.from.last_name;
        needsUpdate = true;
      }
      
      if (needsUpdate) {
        await user.save();
        // Synchroniser les mises √† jour avec la boutique web
        console.log('üîÑ Synchronisation des mises √† jour utilisateur...');
        const syncSuccess = await syncUserToWebApp(user);
        if (!syncSuccess) {
          console.error('‚ö†Ô∏è La synchronisation des mises √† jour a √©chou√©');
        }
      }
    }
    
    user.lastSeen = new Date();
    await user.save();
    
    // G√©rer les deep links pour les plugs avec tra√ßage
    if (param && param.startsWith('plug_')) {
      // V√©rifier d'abord si on est en maintenance
      const inMaintenance = await checkMaintenanceMode(bot, chatId);
      if (inMaintenance) {
        return; // Arr√™ter ici si en maintenance
      }
      
      // Format: plug_PLUGID_REFERRERID
      const parts = param.split('_');
      const plugId = parts[1];
      const referrerId = parts[2]; // ID Telegram de celui qui a partag√©
      
      console.log(`üîó Deep link vers le plug: ${plugId} partag√© par: ${referrerId}`);
      
      // Importer les mod√®les n√©cessaires
      const { handlePlugDetails } = require('./plugsHandler');
      const PlugReferral = require('../models/PlugReferral');
      const Plug = require('../models/Plug');
      
      if (referrerId && referrerId !== userId.toString()) {
        try {
          // V√©rifier si ce n'est pas d√©j√† un filleul existant
          const existingReferral = await PlugReferral.findOne({
            plugId: plugId,
            referrerId: referrerId,
            referredUserId: userId.toString()
          });
          
          if (!existingReferral) {
            // Cr√©er le parrainage
            await PlugReferral.create({
              plugId: plugId,
              referrerId: referrerId,
              referredUserId: userId.toString()
            });
            
            // Mettre √† jour le compteur de parrainages du plug
            const plug = await Plug.findByIdAndUpdate(
              plugId,
              { $inc: { referralCount: 1 } },
              { new: true }
            );
            
            console.log(`‚úÖ Nouveau filleul enregistr√© pour le plug ${plug.name}`);
            
            // Notifier le parrain (admin)
            try {
              const referrerUser = await User.findOne({ telegramId: referrerId });
              if (referrerUser) {
                // Obtenir les infos du nouveau filleul
                const newUserInfo = msg.from.username ? `@${msg.from.username}` : msg.from.first_name;
                
                const notificationMessage = await bot.sendMessage(referrerId, 
                  `üéâ <b>Nouveau filleul pour ${plug.name} !</b>\n\n` +
                  `üë§ <b>Filleul :</b> ${newUserInfo}\n` +
                  `üîå <b>Plug :</b> ${plug.name}\n` +
                  `üìç <b>Localisation :</b> ${plug.country ? `${plug.country}` : 'Non sp√©cifi√©e'}\n\n` +
                  `üìä <b>Statistiques pour ce plug :</b>\n` +
                  `‚Ä¢ Total de vos filleuls : ${await PlugReferral.countDocuments({ plugId: plugId, referrerId: referrerId })}\n` +
                  `‚Ä¢ Total parrainages du plug : ${plug.referralCount}\n\n` +
                  `‚è±Ô∏è <i>Cette notification sera supprim√©e dans 30 secondes</i>`,
                  { parse_mode: 'HTML' }
                );
                
                // Supprimer la notification apr√®s 30 secondes pour √©viter le spam
                setTimeout(async () => {
                  try {
                    await bot.deleteMessage(referrerId, notificationMessage.message_id);
                  } catch (error) {
                    console.log('Notification d√©j√† supprim√©e ou erreur:', error.message);
                  }
                }, 30000); // 30 secondes
                
                // Supprimer aussi le message du lien de parrainage s'il existe
                if (global.referralMessages) {
                  const messageInfo = global.referralMessages.get(`${referrerId}_${plugId}`);
                  if (messageInfo) {
                    try {
                      await bot.deleteMessage(messageInfo.chatId, messageInfo.messageId);
                      global.referralMessages.delete(`${referrerId}_${plugId}`);
                    } catch (error) {
                      console.log('Message de parrainage d√©j√† supprim√© ou erreur:', error.message);
                    }
                  }
                }
              }
            } catch (notifError) {
              console.log('‚ö†Ô∏è Impossible de notifier le parrain:', notifError.message);
            }
          } else {
            console.log('‚ÑπÔ∏è Cet utilisateur est d√©j√† un filleul pour ce plug');
          }
        } catch (error) {
          console.log('‚ö†Ô∏è Erreur enregistrement parrainage:', error.message);
        }
      }
      
      // Afficher directement les d√©tails du plug
      await handlePlugDetails(bot, chatId, plugId, 'plugs', user.telegramId);
      return; // Ne pas afficher le menu principal
    }
    
    // Afficher le menu principal avec v√©rification du canal
    await showMainMenu(bot, chatId, userId);
    
  } catch (error) {
    console.error('Error in handleStart:', error);
    // Pas de message d'erreur visible pour l'utilisateur
  }
}

async function showMainMenu(bot, chatId, userId = null) {
  try {
    console.log('üì± Affichage du menu principal pour:', chatId);
    
    // R√©cup√©rer l'utilisateur pour v√©rifier le statut des notifications
    const User = require('../models/User');
    const Plug = require('../models/Plug');
    let notificationStatus = '';
    if (userId) {
      const user = await User.findOne({ telegramId: userId });
      if (user && user.notificationPreferences) {
        notificationStatus = user.notificationPreferences.acceptsNotifications ? 'üîî' : 'üîï';
      }
    }
    
    // R√©cup√©rer les param√®tres
    const Settings = require('../models/Settings');
    const settings = await Settings.findOne();
    
    // Statistiques
    const userCount = await User.countDocuments() || 0;
    const plugCount = await Plug.countDocuments() || 0;
    
    // Message de bienvenue avec stats
    const welcomeMessage = `üè† <b>Menu Principal</b>\n\n` +
      `üë• Utilisateurs actifs : ${userCount}\n` +
      `üîå PLUGs disponibles : ${plugCount}\n\n` +
      `Que souhaitez-vous faire ?`;
    
    // Boutons du menu
    const keyboard = {
      inline_keyboard: [
        [{ text: 'üîå NOS PLUGS DU MOMENT', callback_data: 'plugs' }],
        [{ text: 'üìä Classement Parrainages', callback_data: 'referral_menu' }],
        [{ text: 'üìù Devenir Vendeur', callback_data: 'vendor_application' }],
        [{ text: `${notificationStatus} Notifications`, callback_data: 'notif_toggle_all' }],
        [{ text: '‚ÑπÔ∏è Informations', callback_data: 'info' }]
      ]
    };
  
  // Envoyer l'image d'accueil si elle existe
  if (settings?.welcomeImage) {
    try {
      await bot.sendPhoto(chatId, settings.welcomeImage, {
        caption: welcomeMessage,
        parse_mode: 'HTML',
        reply_markup: keyboard
      });
    } catch (error) {
      console.error('Erreur envoi image:', error);
      // Si l'image √©choue, envoyer juste le message
      await bot.sendMessage(chatId, welcomeMessage, {
        parse_mode: 'HTML',
        reply_markup: keyboard
      });
    }
  } else {
    await bot.sendMessage(chatId, welcomeMessage, {
      parse_mode: 'HTML',
      reply_markup: keyboard
    });
  }
  } catch (error) {
    console.error('Erreur showMainMenu:', error);
    // Fallback simple
    await bot.sendMessage(chatId, 'üè† Menu Principal', {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üîå NOS PLUGS DU MOMENT', callback_data: 'plugs' }],
          [{ text: 'üìä Classement', callback_data: 'referral_menu' }]
        ]
      }
    });
  }
}

module.exports = { handleStart, showMainMenu };
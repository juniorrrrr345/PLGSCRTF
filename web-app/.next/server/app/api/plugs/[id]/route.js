"use strict";(()=>{var e={};e.id=938,e.ids=[938],e.modules={11185:e=>{e.exports=require("mongoose")},30517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},43888:(e,t,r)=>{r.r(t),r.d(t,{headerHooks:()=>h,originalPathname:()=>w,patchFetch:()=>P,requestAsyncStorage:()=>y,routeModule:()=>m,serverHooks:()=>S,staticGenerationAsyncStorage:()=>f,staticGenerationBailout:()=>v});var n={};r.r(n),r.d(n,{DELETE:()=>c,GET:()=>d,PUT:()=>g});var o=r(6170),a=r(8533),i=r(54387),s=r(40064),l=r(30611),u=r(11027);async function p(e,t,r){try{let n=process.env.BOT_API_URL||"http://localhost:3000",o=await fetch(`${n}/api/webhook/update`,{method:"POST",headers:{"Content-Type":"application/json","X-API-Key":process.env.BOT_API_KEY||""},body:JSON.stringify({type:e,action:t,data:r})});o.ok||console.error("Failed to notify bot:",await o.text())}catch(e){console.error("Error notifying bot:",e)}}async function d(e,{params:t}){try{await (0,l.v)();let e=await u.Z.findById(t.id);if(!e)return s.Z.json({error:"Plug not found"},{status:404});return s.Z.json(e)}catch(e){return s.Z.json({error:"Internal server error"},{status:500})}}async function g(e,{params:t}){try{let r=await e.json();await (0,l.v)();let n=await u.Z.findByIdAndUpdate(t.id,{...r,updatedAt:new Date},{new:!0});if(!n)return s.Z.json({error:"Plug not found"},{status:404});return await p("plug","update",{name:n.name,countryFlag:n.countryFlag,department:n.department}),s.Z.json(n)}catch(e){return console.error("Error updating plug:",e),s.Z.json({error:"Internal server error"},{status:500})}}async function c(e,{params:t}){try{await (0,l.v)();let e=await u.Z.findByIdAndDelete(t.id);if(!e)return s.Z.json({error:"Plug not found"},{status:404});return await p("plug","delete",{name:e.name}),s.Z.json({success:!0,message:"Plug deleted successfully"})}catch(e){return console.error("Error deleting plug:",e),s.Z.json({error:"Internal server error"},{status:500})}}let m=new o.AppRouteRouteModule({definition:{kind:a.x.APP_ROUTE,page:"/api/plugs/[id]/route",pathname:"/api/plugs/[id]",filename:"route",bundlePath:"app/api/plugs/[id]/route"},resolvedPagePath:"/workspace/web-app/app/api/plugs/[id]/route.ts",nextConfigOutput:"",userland:n}),{requestAsyncStorage:y,staticGenerationAsyncStorage:f,serverHooks:S,headerHooks:h,staticGenerationBailout:v}=m,w="/api/plugs/[id]/route";function P(){return(0,i.patchFetch)({serverHooks:S,staticGenerationAsyncStorage:f})}},30611:(e,t,r)=>{r.d(t,{v:()=>s});var n=r(11185),o=r.n(n);let a=process.env.MONGODB_URI;if(!a)throw Error("Please define the MONGODB_URI environment variable");let i=global.mongoose||{conn:null,promise:null};async function s(){if(i.conn)return i.conn;i.promise||(i.promise=o().connect(a,{bufferCommands:!1}));try{i.conn=await i.promise}catch(e){throw i.promise=null,e}return i.conn}global.mongoose||(global.mongoose=i)},11027:(e,t,r)=>{r.d(t,{Z:()=>i});var n=r(11185),o=r.n(n);let a=new(o()).Schema({name:{type:String,required:!0},photo:String,description:String,methods:{delivery:{type:Boolean,default:!1},shipping:{type:Boolean,default:!1},meetup:{type:Boolean,default:!1}},deliveryDepartments:[{type:String}],deliveryPostalCodes:[{type:String}],meetupDepartments:[{type:String}],meetupPostalCodes:[{type:String}],socialNetworks:{snap:String,instagram:String,whatsapp:String,signal:String,threema:String,potato:String,telegram:String,other:String},customNetworks:[{id:String,name:String,emoji:String,link:String}],location:{country:String,department:String,postalCode:String},countries:[{type:String}],shippingCountries:[{type:String}],country:String,countryFlag:String,department:String,postalCode:String,likes:{type:Number,default:0},referralCount:{type:Number,default:0},referralLink:String,isActive:{type:Boolean,default:!0},isExample:{type:Boolean,default:!1}},{timestamps:!0});a.index({likes:-1}),a.index({referralCount:-1});let i=o().models.Plug||o().model("Plug",a)}};var t=require("../../../../webpack-runtime.js");t.C(e);var r=e=>t(t.s=e),n=t.X(0,[864,386],()=>r(43888));module.exports=n})();